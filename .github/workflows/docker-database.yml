name: Build Zephyr Docker Image

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag (default: latest)'
        required: false
        default: 'latest'
        type: string
      branch:
        description: 'Git branch to build from (default: main)'
        required: false
        default: 'main'
        type: string
      environment:
        description: 'Build environment'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - production
  release:
    types: [published]

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  REGISTRY_IMAGE: ghcr.io/mocha-fe/zephyr

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.platform }} Image
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Checkout base
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ github.event.inputs.image_tag || 'latest' }}
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Get commit SHA
        if: github.ref == 'refs/heads/main'
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set environment variables
        id: env
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "app_url=http://8.219.137.29" >> $GITHUB_OUTPUT
            echo "openapi_endpoint=http://8.219.137.29:3000" >> $GITHUB_OUTPUT
            echo "oidc_issuer=http://8.219.137.29:3000/oidc" >> $GITHUB_OUTPUT
            echo "litellm_url=http://8.219.137.29:4000" >> $GITHUB_OUTPUT
            echo "nlp_endpoint=http://8.219.137.29:8001" >> $GITHUB_OUTPUT
            echo "use_cn_mirror=1" >> $GITHUB_OUTPUT
          else
            echo "app_url=http://lobe.shabby.in:5000" >> $GITHUB_OUTPUT
            echo "openapi_endpoint=http://lobe.shabby.in:5001" >> $GITHUB_OUTPUT
            echo "oidc_issuer=http://lobe.shabby.in:5001/oidc" >> $GITHUB_OUTPUT
            echo "litellm_url=http://lobe.shabby.in:4000" >> $GITHUB_OUTPUT
            echo "nlp_endpoint=http://lobe.shabby.in:8001" >> $GITHUB_OUTPUT
            echo "use_cn_mirror=0" >> $GITHUB_OUTPUT
          fi

      - name: Build and export
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          context: .
          file: ./Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SHA=${{ steps.vars.outputs.sha_short }}
            NEXT_PUBLIC_APP_URL=${{ steps.env.outputs.app_url }}
            NEXT_PUBLIC_APP_NAME=保险客户管理系统
            NEXT_PUBLIC_OPENAPI_ENDPOINT=${{ steps.env.outputs.openapi_endpoint }}
            NEXT_PUBLIC_OIDC_CLIENT_ID=zephyr
            NEXT_PUBLIC_OIDC_ISSUER=${{ steps.env.outputs.oidc_issuer }}
            NEXT_PUBLIC_LITELLM_URL=${{ steps.env.outputs.litellm_url }}
            NEXT_PUBLIC_NLP_ENDPOINT=${{ steps.env.outputs.nlp_endpoint }}
            USE_CN_MIRROR=${{ steps.env.outputs.use_cn_mirror }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          rm -rf /tmp/digests
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
          fetch-depth: 0

      - name: Set environment variables
        id: env
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "app_url=http://8.219.137.29" >> $GITHUB_OUTPUT
            echo "openapi_endpoint=http://8.219.137.29:3000" >> $GITHUB_OUTPUT
            echo "oidc_issuer=http://8.219.137.29:3000/oidc" >> $GITHUB_OUTPUT
            echo "litellm_url=http://8.219.137.29:4000" >> $GITHUB_OUTPUT
            echo "nlp_endpoint=http://8.219.137.29:8001" >> $GITHUB_OUTPUT
            echo "use_cn_mirror=1" >> $GITHUB_OUTPUT
          else
            echo "app_url=http://lobe.shabby.in:5000" >> $GITHUB_OUTPUT
            echo "openapi_endpoint=http://lobe.shabby.in:5001" >> $GITHUB_OUTPUT
            echo "oidc_issuer=http://lobe.shabby.in:5001/oidc" >> $GITHUB_OUTPUT
            echo "litellm_url=http://lobe.shabby.in:4000" >> $GITHUB_OUTPUT
            echo "nlp_endpoint=http://lobe.shabby.in:8001" >> $GITHUB_OUTPUT
            echo "use_cn_mirror=0" >> $GITHUB_OUTPUT
          fi

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digest-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ github.event.inputs.image_tag || 'latest' }}
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ github.event.inputs.image_tag || 'latest' }}
